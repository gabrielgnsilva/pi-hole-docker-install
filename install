#!/bin/bash

function disableStubResolver(){
    sed -r -i.orig 's/#?DNSStubListener=yes/DNSStubListener=no/g' /etc/systemd/resolved.conf
    sh -c 'rm /etc/resolv.conf && ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf'
    systemctl restart systemd-resolved
}

function setupDocker() {
    # Note: FTLCONF_LOCAL_IPV4 should be replaced with your external ip.
    docker run -d                                                    \
        --name pihole                                                \
        -p 53:53/tcp -p 53:53/udp                                    \
        -p 80:80                                                     \
        -p 8080:8080                                                 \
        -e TZ="America/Chicago"                                      \
        -v "${PIHOLE_BASE}/etc-pihole:/etc/pihole${selinux:-}"       \
        -v "${PIHOLE_BASE}/etc-dnsmasq.d:/etc/dnsmasq.d${selinux:-}" \
        --dns=127.0.0.1 --dns=1.1.1.1                                \
        --restart=unless-stopped                                     \
        --hostname pi.hole                                           \
        -e VIRTUAL_HOST="pi.hole"                                    \
        -e PROXY_LOCATION="pi.hole"                                  \
        -e FTLCONF_LOCAL_IPV4="127.0.0.1"                            \
        pihole/pihole:latest

    printf 'Starting up pihole container '
    for i in $(seq 1 20); do
        if [ "$(docker inspect -f "{{.State.Health.Status}}" pihole)" == "healthy" ] ; then
            printf ' OK'
            echo -e "\n$(docker logs pihole 2> /dev/null | grep 'password:') for your pi-hole: http://${IP}/admin/"
            return 0
        else
            sleep 3
            printf '.'
        fi

        if [ "${i}" -eq 20 ] ; then
            echo -e "\nTimed out waiting for Pi-hole start, consult your container logs for more info (\`docker logs pihole\`)" >&2
            exit 1
        fi
    done;
}

function enablePiHoleService() {
    local systemd_file="/etc/systemd/system/pihole.service"
    if [[ ! -f "${systemd_file}" ]]; then
        printf 'Adding Systemd init script..\n'
        touch systemd_file
        echo -e "[Unit]\nDescription=pihole\nRequires=docker.service multi-user.target\nAfter=docker.service network-online.target dhcpd.service\n\n[Service]\nRestart=always\nExecStart=/usr/bin/docker start -a pihole\nExecStop=/usr/bin/docker stop -t 2 pihole\n\n[Install]\nWantedBy=multi-user.target" \
            | tee "${systemd_file}" > /dev/null
        systemctl enable --now pihole.service
    fi
}

function main() {
    if ! command -v docker; then
        echo -e "\nDocker was not found !" >&2
        exit 1
    fi

    if sestatus | grep -Eq "^Current mode:.*enforcing$"; then
        selinux=":z"
    fi

    PIHOLE_BASE="${PIHOLE_BASE:-$(pwd)}"
    if [[ ! -d "$PIHOLE_BASE" ]]; then
        mkdir -p "$PIHOLE_BASE" || {
            echo "Couldn't create storage directory: $PIHOLE_BASE" >&2
            exit 1
        }
    fi

    disableStubResolver
    setupDocker                 \
        && enablePiHoleService
}

# Invoke main with args only if not sourced
if ! (return 0 2> /dev/null); then
    main "${@}"
fi
