#!/bin/bash

function disableStubResolver(){
    sed --regexp-extended 's/#?DNSStubListener=yes/DNSStubListener=no/g' \
        --in-place=.bak /etc/systemd/resolved.conf
    sh -c 'rm /etc/resolv.conf \
        && ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf'
    systemctl restart systemd-resolved
}

function setupDocker() {

    local i
    local IP
    local piholePass
    local dockerStatus

    # Note: FTLCONF_LOCAL_IPV4 should be replaced with your external ip.
    docker run -d                                                    \
        --name pihole                                                \
        -p 53:53/tcp -p 53:53/udp                                    \
        -p 80:80                                                     \
        -p 8080:8080                                                 \
        -e TZ="America/Chicago"                                      \
        -v "${PIHOLE_BASE}/etc-pihole:/etc/pihole${selinux:-}"       \
        -v "${PIHOLE_BASE}/etc-dnsmasq.d:/etc/dnsmasq.d${selinux:-}" \
        --dns=127.0.0.1 --dns=1.1.1.1                                \
        --restart=unless-stopped                                     \
        --hostname pi.hole                                           \
        -e VIRTUAL_HOST="pi.hole"                                    \
        -e PROXY_LOCATION="pi.hole"                                  \
        -e FTLCONF_LOCAL_IPV4="127.0.0.1"                            \
        pihole/pihole:latest

    printf 'Starting up pihole container '

    dockerStatus="$(docker inspect -f "{{.State.Health.Status}}" pihole)"
    for i in $(seq 1 20); do
        if [[ "${dockerStatus}" == "healthy" ]]; then
            printf ' OK'
            piholePass="$(docker logs pihole 2> /dev/null | grep 'password:')"
            echo -e "\n${piholePass} for your pi-hole: http://${IP:-..}/admin/"
            return 0
        else
            sleep 3
            printf '.'
        fi

        if [[ "${i}" -eq 20 ]]; then
            echo -e "\nTimed out waiting for Pi-hole start, consult your" >&2
            echo -e "container logs for more info (\`docker logs pihole\`)" >&2
            exit 1
        fi
    done
}

function enablePiHoleService() {
    local systemd_file="/etc/systemd/system/pihole.service"
    if [[ ! -f "${systemd_file}" ]]; then
        printf 'Adding Systemd init script..\n'
        touch systemd_file
        {
            printf "[Unit]\n"
            printf "Description=pihole\n"
            printf "Requires=docker.service multi-user.target\n"
            printf "After=docker.service network-online.target dhcpd.service\n"
            printf "\n"
            printf "[Service]\n"
            printf "Restart=always\n"
            printf "ExecStart=/usr/bin/docker start -a pihole\n"
            printf "ExecStop=/usr/bin/docker stop -t 2 pihole\n"
            printf "\n"
            printf "[Install]\n"
            printf "WantedBy=multi-user.target"
        } | tee "${systemd_file}" > /dev/null

        systemctl enable --now pihole.service
    fi
}

function setupUnbound() {
    dnf install unbound --assumeyes

    wget https://www.internic.net/domain/named.root -qO- \
        | tee /var/lib/unbound/root.hints > /dev/null


    {
        printf "server:\n"
        printf "    verbosity: 0\n"
        printf "\n"
        printf "    interface: 127.0.0.1\n"
        printf "    port: 5335\n"
        printf "    do-ip4: yes\n"
        printf "    do-udp: yes\n"
        printf "    do-tcp: yes\n"
        printf "    do-ip6: yes\n"
        printf "\n"
        printf "    prefer-ip6: no\n"
        printf "\n"
        printf "    root-hints: \"/var/lib/unbound/root.hints\"\n"
        printf "\n"
        printf "    harden-glue: yes\n"
        printf "\n"
        printf "    harden-dnssec-stripped: yes\n"
        printf "\n"
        printf "    use-caps-for-id: no\n"
        printf "\n"
        printf "    edns-buffer-size: 1232\n"
        printf "\n"
        printf "    prefetch: yes\n"
        printf "\n"
        printf "    num-threads: 1\n"
        printf "\n"
        printf "    so-rcvbuf: 1m\n"
        printf "\n"
        printf "    private-address: 192.168.0.0/16\n"
        printf "    private-address: 169.254.0.0/16\n"
        printf "    private-address: 172.16.0.0/12\n"
        printf "    private-address: 10.0.0.0/8\n"
        printf "    private-address: fd00::/8\n"
        printf "    private-address: fe80::/10\n"
    } | tee /etc/unbound/unbound.conf.d/pi-hole.conf > /dev/null


function main() {
    if ! command -v docker; then
        echo -e "\nDocker was not found !" >&2
        exit 1
    fi

    if sestatus | grep -Eq "^Current mode:.*enforcing$"; then
        selinux=":z"
    fi

    PIHOLE_BASE="${PIHOLE_BASE:-$(pwd)}"
    if [[ ! -d "${PIHOLE_BASE}" ]]; then
        mkdir -p "${PIHOLE_BASE}" || {
            echo "Couldn't create storage directory: ${PIHOLE_BASE}" >&2
            exit 1
        }
    fi

    disableStubResolver
    setupDocker                 \
        && enablePiHoleService
}

# Invoke main with args only if not sourced
if ! (return 0 2> /dev/null); then
    main "${@}"
fi
